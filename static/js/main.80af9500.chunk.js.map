{"version":3,"sources":["img/cookie.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","counter","x","click","this","setState","alert","multiply","y","className","src","cookie","value","onClick","handleCookieClick","bind","handleClick","handleMultiply","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,oC,+MC4H5BC,E,kDAvHb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,QAAU,IACVC,EAAI,GAJU,E,wDAQNC,EAAOD,GACbE,KAAKJ,MAAMC,QAAUC,GACvBE,KAAKC,SAAS,CAACJ,SAAUE,EAAMC,KAAKJ,MAAMC,UAC1CG,KAAKC,SAAS,CAACJ,QAASG,KAAKJ,MAAMC,QAAQC,IAC3CE,KAAKC,SAAS,CAACH,EAAiB,EAAbE,KAAKJ,MAAME,EAAIC,KAGlCG,MAAM,yB,qCAIKC,EAAUC,GACnBJ,KAAKJ,MAAMC,QAAUO,GACzBJ,KAAKC,SAAS,CAACJ,QAASM,EAASH,KAAKJ,MAAMC,UAC5CG,KAAKC,SAAS,CAACJ,QAASG,KAAKJ,MAAMC,QAAQO,KAGzCF,MAAM,yB,wCAIQJ,GAChBE,KAAKC,SAAS,CAACJ,QAASG,KAAKJ,MAAMC,QAAQC,M,+BAM3C,OACE,yBAAKO,UAAU,OACb,yBACEA,UAAU,cACTL,KAAKJ,MAAMC,QAFd,YAKE,yBAAKQ,UAAU,UACb,yBAAKC,IAAKC,IAAQC,MAAM,SACtBC,QAAST,KAAKU,kBAAkBC,KAAKX,KAAMA,KAAKJ,MAAME,MAE1D,4BACE,4BACE,uBACAW,QAAST,KAAKY,YAAYD,KAAKX,KAAM,EAAG,MADxC,QAKF,4BACE,uBACAS,QAAST,KAAKY,YAAYD,KAAKX,KAAM,EAAG,MADxC,QAKF,4BACE,uBACAS,QAAST,KAAKY,YAAYD,KAAKX,KAAM,GAAI,MADzC,QAKF,4BACE,uBACAS,QAAST,KAAKY,YAAYD,KAAKX,KAAM,GAAI,MADzC,QAKF,4BACE,uBACAS,QAAST,KAAKY,YAAYD,KAAKX,KAAM,GAAI,MADzC,UAOJ,4BACE,4BACE,uBACAS,QAAST,KAAKa,eAAeF,KAAKX,KAAM,EAAG,MAD3C,OAKF,4BACE,uBACAS,QAAST,KAAKa,eAAeF,KAAKX,KAAM,EAAG,MAD3C,OAKF,4BACE,uBACAS,QAAST,KAAKa,eAAeF,KAAKX,KAAM,EAAG,MAD3C,OAKF,4BACE,uBACAS,QAAST,KAAKa,eAAeF,KAAKX,KAAM,EAAG,MAD3C,OAKF,4BACE,uBACAS,QAAST,KAAKa,eAAeF,KAAKX,KAAM,EAAG,MAD3C,a,GA3GIc,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.80af9500.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cookie.1550cf1f.png\";","import React from 'react';\nimport './App.css';\nimport cookie from './img/cookie.png';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      counter : 201,\n      x : 1,\n    }\n  }\n\n  handleClick(click, x){\n    if( this.state.counter > x ){\n      this.setState({counter: +click+this.state.counter})\n      this.setState({counter: this.state.counter-x})\n      this.setState({x : this.state.x*0+click})\n    }\n    else{\n      alert(\"Don't have a Cookie\");\n    }\n  }\n\n  handleMultiply(multiply, y){\n    if( this.state.counter > y ){\n    this.setState({counter: multiply*this.state.counter})\n    this.setState({counter: this.state.counter-y})\n    }\n    else{\n      alert(\"Don't have a Cookie\")\n    }\n  }\n\n  handleCookieClick(x){\n    this.setState({counter: this.state.counter+x})\n\n  }\n\n  render(){\n\n    return (\n      <div className=\"App\">\n        <div\n          className=\"haveCookie\">\n          {this.state.counter} cookie!\n        </div>\n\n          <div className=\"cookie\">\n            <img src={cookie} value=\"cookie\"\n              onClick={this.handleCookieClick.bind(this, this.state.x)}/>\n          </div>\n          <ul>\n            <li>\n              <a \n              onClick={this.handleClick.bind(this, 1, 100)}>\n                100\n              </a>\n            </li>\n            <li>\n              <a\n              onClick={this.handleClick.bind(this, 5, 200)}>\n                200\n              </a>\n            </li>\n            <li>\n              <a\n              onClick={this.handleClick.bind(this, 10, 400)}>\n                400\n              </a>\n            </li>\n            <li>\n              <a\n              onClick={this.handleClick.bind(this, 20, 800)}>\n                800\n              </a>\n            </li>\n            <li>\n              <a\n              onClick={this.handleClick.bind(this, 50, 1000)}>\n                1000\n              </a>\n            </li>\n          </ul>\n\n          <ul>\n            <li>\n              <a\n              onClick={this.handleMultiply.bind(this, 2, 1000)}\n              >x2\n              </a>\n            </li>\n            <li>\n              <a\n              onClick={this.handleMultiply.bind(this, 2, 2000)}\n              >x3\n              </a>\n            </li>\n            <li>\n              <a\n              onClick={this.handleMultiply.bind(this, 2, 3000)}\n              >x4\n              </a>\n            </li>\n            <li>\n              <a\n              onClick={this.handleMultiply.bind(this, 2, 4000)}\n              >x5\n              </a>\n            </li>\n            <li>\n              <a\n              onClick={this.handleMultiply.bind(this, 2, 5000)}\n              >x6\n              </a>\n            </li>\n          </ul>\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}